package io.github.darvld.granite.plugin

import io.github.darvld.granite.plugin.backend.ComponentTypeGenerationExtension
import io.github.darvld.granite.plugin.common.ComponentContext
import io.github.darvld.granite.plugin.frontend.diagnostics.ComponentStorageContributor
import io.github.darvld.granite.plugin.frontend.k1.ComponentTypeResolveExtension
import io.github.darvld.granite.plugin.frontend.k2.FirComponentExtensionRegistrar
import org.jetbrains.kotlin.backend.common.extensions.IrGenerationExtension
import org.jetbrains.kotlin.compiler.plugin.CompilerPluginRegistrar
import org.jetbrains.kotlin.config.CompilerConfiguration
import org.jetbrains.kotlin.extensions.StorageComponentContainerContributor
import org.jetbrains.kotlin.fir.extensions.FirExtensionRegistrarAdapter
import org.jetbrains.kotlin.resolve.extensions.SyntheticResolveExtension

/**
 * Compiler plugin registrar for the Granite plugin.
 *
 * The Granite plugin automatically generates synthetic companion objects implementing the `ComponentType` interface
 * for classes annotated with `@ComponentData`.
 *
 * An implementation for the `type` property will be added to the synthetic companion, returning a Component with an
 * ID that is guaranteed to be unique within the current compilation.
 *
 * This service registers the following extensions:
 *
 * - The [ComponentTypeResolveExtension] (K1) generates synthetic companion objects, adds the corresponding
 *   interfaces, and creates the synthetic component type property if not present.
 * - The [FirComponentExtensionRegistrar] (K2) handles registration of the new FIR-based extensions for the compiler
 *   frontend, which generate the synthetic companion objects, superinterfaces, etc.
 * - The [ComponentTypeGenerationExtension] adds a body to the getter of the synthetic property generated by the
 *   synthetic resolve extension.
 */
class GraniteComponentPluginRegistrar : CompilerPluginRegistrar() {
  override val supportsK2: Boolean = true

  override fun ExtensionStorage.registerExtensions(configuration: CompilerConfiguration) {
    val context = ComponentContext.from(configuration)

    // frontend extensions for K1 (SyntheticResolve) and K2 (Fir)
    SyntheticResolveExtension.registerExtension(ComponentTypeResolveExtension())
    FirExtensionRegistrarAdapter.registerExtension(FirComponentExtensionRegistrar())

    // backend (common)
    IrGenerationExtension.registerExtension(ComponentTypeGenerationExtension(context))

    // helpers (diagnostics and inspections)
    StorageComponentContainerContributor.registerExtension(ComponentStorageContributor())
  }
}
