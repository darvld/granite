package io.github.darvld.granite.plugin

import io.github.darvld.granite.plugin.common.ComponentContext
import io.github.darvld.granite.plugin.diagnostics.ComponentStorageContributor
import io.github.darvld.granite.plugin.ir.ComponentTypeGenerationExtension
import io.github.darvld.granite.plugin.resolve.ComponentTypeResolveExtension
import org.jetbrains.kotlin.backend.common.extensions.IrGenerationExtension
import org.jetbrains.kotlin.compiler.plugin.CompilerPluginRegistrar
import org.jetbrains.kotlin.config.CompilerConfiguration
import org.jetbrains.kotlin.extensions.StorageComponentContainerContributor
import org.jetbrains.kotlin.resolve.extensions.SyntheticResolveExtension

/**
 * Compiler plugin registrar for the Granite plugin.
 *
 * The Granite plugin automatically generates synthetic companion objects implementing the `ComponentType` interface
 * for classes annotated with `@ComponentData`.
 *
 * An implementation for the `type` property will be added to the synthetic companion, returning a Component with an
 * ID that is guaranteed to be unique within the current compilation.
 *
 * This component registers the following extensions:
 *
 * - The [ComponentTypeResolveExtension] generates synthetic companion objects, adds the corresponding
 *   interfaces, and creates the synthetic component type property if not present.
 * - The [ComponentTypeGenerationExtension] adds a body to the getter of the synthetic property generated by the
 *   synthetic resolve extension.
 *
 * As it is currently implemented, this plugin does not support K2.
 *
 * @see ComponentTypeResolveExtension
 * @see ComponentTypeGenerationExtension
 */
class GraniteComponentPluginRegistrar : CompilerPluginRegistrar() {
  override val supportsK2: Boolean = false

  override fun ExtensionStorage.registerExtensions(configuration: CompilerConfiguration) {
    val context = ComponentContext.from(configuration)

    IrGenerationExtension.registerExtension(ComponentTypeGenerationExtension(context))
    SyntheticResolveExtension.registerExtension(ComponentTypeResolveExtension())
    StorageComponentContainerContributor.registerExtension(ComponentStorageContributor())
  }
}
